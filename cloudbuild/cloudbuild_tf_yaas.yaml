steps:
  - name: "hashicorp/terraform:1.3.7"
    id: TERRAFORM_INIT
    entrypoint: "sh"
    args: ["-c", "terraform -chdir=${_TF_DIR} init -upgrade"]
  - name: "hashicorp/terraform:1.3.7"
    id: TERRAFORM_PLAN
    entrypoint: "sh"
    args: ["-c", "terraform -chdir=${_TF_DIR} plan ${_TF_PLAN_ARGS} -out=${_TF_PLAN_FILE}"]
  - name: "gcr.io/cloud-builders/gcloud"
    id: WAIT_FOR_RUN_READY
    script: |
      #!/usr/bin/env bash
      VALID_LATEST_STATUS="True"
      VALID_LATEST_TYPE="Ready"
      SEPARATOR="@"
      VALID_TYPE_STATUS="${VALID_LATEST_TYPE}${SEPARATOR}${VALID_LATEST_STATUS}"
      
      REGION=${REGION:-europe-west3}
      MAX_RETRIES=${MAX_RETRIES:-5}
      RETRY_SLEEP_IN_SECS=${RETRY_SLEEP_IN_SECS:-10}
      
      PATH_LATEST_STATUS="status.conditions[0].status"
      PATH_LATEST_TYPE="status.conditions[0].type"
      
      SERVICE_LOG_STR="${SERVICE_NAME}@${REGION} in ${PROJECT}"
      
      function latest_status_condition
      {
        local STATUS_PATH=${1}
      
        gcloud run services describe ${SERVICE_NAME} \
          --region=${REGION} \
          --project=${PROJECT} \
          --format="value(${STATUS_PATH})"
      }
      
      function latest_type_status
      {
        local LATEST_STATUS=$(latest_status_condition ${PATH_LATEST_STATUS})
        local LATEST_TYPE=$(latest_status_condition ${PATH_LATEST_TYPE})
      
        echo "${LATEST_TYPE}${SEPARATOR}${LATEST_STATUS}"
      }
      
      function is_ready
      {
        local LATEST_TYPE_STATUS=$(latest_type_status)
        
        local RESULT=1
        if [ "${LATEST_TYPE_STATUS}" == "${VALID_TYPE_STATUS}" ]
        then
          RESULT=0
        fi
        return ${RESULT}
      }
      
      function wait_for_ready
      {
        local IS_READY=1
        local RESULT=1

        local LATEST_TYPE_STATUS=""
      
        for SEC in $(seq 1 ${MAX_RETRIES})
        do
          is_ready
          IS_READY=${?}
          if [ ${IS_READY} -eq 0 ]
          then
            RESULT=0
            break
          fi
          LATEST_TYPE_STATUS=$(latest_type_status)
          echo "Service ${SERVICE_LOG_STR} is **NOT** ready. Got: <${LATEST_TYPE_STATUS}>. Expected: <${VALID_TYPE_STATUS}>"
          echo "Retry ${SEC} of ${MAX_RETRIES}, waiting ${RETRY_SLEEP_IN_SECS} seconds."
          sleep ${RETRY_SLEEP_IN_SECS}
        done
        
        LATEST_TYPE_STATUS=$(latest_type_status)
        if [ ${RESULT} -eq 0 ]
        then
          echo "[OK] Service ${SERVICE_LOG_STR} is ready. Got: <${LATEST_TYPE_STATUS}>. Expected: <${VALID_TYPE_STATUS}>"
        else
          echo "[ERROR] Service ${SERVICE_LOG_STR} is not ready. Got: <${LATEST_TYPE_STATUS}>. Expected: <${VALID_TYPE_STATUS}>"
        fi
      
        return ${RESULT}
      }
      
      echo "Waiting for service ${SERVICE_LOG_STR} to be ready <${VALID_TYPE_STATUS}>"
      echo "Max retries is ${MAX_RETRY} with sleep time of ${RETRY_SLEEP_IN_SECS} seconds in between."
      
      wait_for_ready
      exit ${?}
  - name: "hashicorp/terraform:1.3.7"
    id: TERRAFORM_APPLY
    entrypoint: "sh"
    args: ["-c", "terraform -chdir=${_TF_DIR} apply ${_TF_PLAN_FILE}"]
logsBucket: "gs://${_BUCKET_NAME}/cloudbuild_logs/${TRIGGER_NAME}"
options:
  dynamic_substitutions: true
  env:
    - "REGION=${LOCATION}"
    - "PROJECT=${PROJECT_ID}"
    - "SERVICE_NAME=${_SERVICE_NAME}"
    - "MAX_RETRIES=${_MAX_RETRIES}"
    - "RETRY_SLEEP_IN_SECS=${_RETRY_SLEEP_IN_SECS}"
  logging: LEGACY
  logStreamingOption: STREAM_DEFAULT
  machineType: UNSPECIFIED
  substitution_option: "ALLOW_LOOSE"
substitutions:
  _TF_DIR: "terraform/yaas"
  _TF_PLAN_ARGS: ""
  _TF_PLAN_FILE: "${SHORT_SHA}_tf_plan.out"
  _SERVICE_NAME: ""
  _MAX_RETRIES: "10"
  _RETRY_SLEEP_IN_SECS: "10"
