steps:
  - name: "hashicorp/terraform:1.3.7"
    id: TERRAFORM_INIT
    entrypoint: "sh"
    args: ["-c", "terraform -chdir=${_TF_DIR} init -upgrade"]
  - name: "hashicorp/terraform:1.3.7"
    id: TERRAFORM_PLAN
    entrypoint: "sh"
    args: ["-c", "terraform -chdir=${_TF_DIR} plan ${_TF_PLAN_ARGS} -out=${_TF_PLAN_FILE}"]
  - name: "gcr.io/cloud-builders/gcloud"
    id: WAIT_FOR_RUN_READY
    entrypoint: "sh"
    script: "#!/usr/bin/env sh\nVALID_LATEST_STATUS=\"True\"\nVALID_LATEST_TYPE=\"Ready\"\nSEPARATOR=\"@\"\nVALID_TYPE_STATUS=\"${VALID_LATEST_TYPE}${SEPARATOR}${VALID_LATEST_STATUS}\"\n\nREGION=${REGION:-europe-west3}\nMAX_RETRIES=${MAX_RETRIES:-5}\nRETRY_SLEEP_IN_SECS=${RETRY_SLEEP_IN_SECS:-10}\n\nPATH_LATEST_STATUS=\"status.conditions[0].status\"\nPATH_LATEST_TYPE=\"status.conditions[0].type\"\n\nSERVICE_LOG_STR=\"${SERVICE_NAME}@${REGION}
      in ${PROJECT}\"\n\nfunction latest_status_condition\n{\n  local STATUS_PATH=${1}\n\n
      \ gcloud run services describe ${SERVICE_NAME} \\\n    --region=${REGION} \\\n
      \   --project=${PROJECT} \\\n    --format=\"value(${STATUS_PATH})\"\n}\n\nfunction
      latest_type_status\n{\n  local LATEST_STATUS=$(latest_status_condition ${PATH_LATEST_STATUS})\n
      \ local LATEST_TYPE=$(latest_status_condition ${PATH_LATEST_TYPE})\n\n  echo
      \"${LATEST_TYPE}${SEPARATOR}${LATEST_STATUS}\"\n}\n\nfunction is_ready\n{\n
      \ local LATEST_TYPE_STATUS=$(latest_type_status)\n  \n  local RESULT=1\n  if
      [ \"${LATEST_TYPE_STATUS}\" == \"${VALID_TYPE_STATUS}\" ]\n  then\n    RESULT=0\n
      \ fi\n  return ${RESULT}\n}\n\nfunction wait_for_ready\n{\n  local IS_READY=1\n
      \ local RESULT=1\n\n  local LATEST_TYPE_STATUS=\"\"\n\n  for SEC in $(seq 1
      ${MAX_RETRIES})\n  do\n    is_ready\n    IS_READY=${?}\n    if [ ${IS_READY}
      -eq 0 ]\n    then\n      RESULT=0\n      break\n    fi\n    LATEST_TYPE_STATUS=$(latest_type_status)\n
      \   echo \"Service ${SERVICE_LOG_STR} is **NOT** ready. Got: <${LATEST_TYPE_STATUS}>.
      Expected: <${VALID_TYPE_STATUS}>\"\n    echo \"Retry ${SEC} of ${MAX_RETRIES},
      waiting ${RETRY_SLEEP_IN_SECS} seconds.\"\n    sleep ${RETRY_SLEEP_IN_SECS}\n
      \ done\n  \n  LATEST_TYPE_STATUS=$(latest_type_status)\n  if [ ${RESULT} -eq
      0 ]\n  then\n    echo \"[OK] Service ${SERVICE_LOG_STR} is ready. Got: <${LATEST_TYPE_STATUS}>.
      Expected: <${VALID_TYPE_STATUS}>\"\n  else\n    echo \"[ERROR] Service ${SERVICE_LOG_STR}
      is not ready. Got: <${LATEST_TYPE_STATUS}>. Expected: <${VALID_TYPE_STATUS}>\"\n
      \ fi\n\n  return ${RESULT}\n}\n\necho \"Waiting for service ${SERVICE_LOG_STR}
      to be ready <${VALID_TYPE_STATUS}>\"\necho \"Max retries is ${MAX_RETRY} with
      sleep time of ${RETRY_SLEEP_IN_SECS} seconds in between.\"\n\nwait_for_ready\nexit
      ${?}\n"
  - name: "hashicorp/terraform:1.3.7"
    id: TERRAFORM_APPLY
    entrypoint: "sh"
    args: ["-c", "terraform -chdir=${_TF_DIR} apply ${_TF_PLAN_FILE}"]
logsBucket: "gs://${_BUCKET_NAME}/cloudbuild_logs/${TRIGGER_NAME}"
options:
  dynamic_substitutions: true
  env:
    - "REGION=${LOCATION}"
    - "PROJECT=${PROJECT_ID}"
    - "SERVICE_NAME=${_SERVICE_NAME}"
    - "MAX_RETRIES=${_MAX_RETRIES}"
    - "RETRY_SLEEP_IN_SECS=${_RETRY_SLEEP_IN_SECS}"
  logging: LEGACY
  logStreamingOption: STREAM_DEFAULT
  machineType: UNSPECIFIED
  substitution_option: "ALLOW_LOOSE"
substitutions:
  _TF_DIR: "terraform/yaas"
  _TF_PLAN_ARGS: ""
  _TF_PLAN_FILE: "${SHORT_SHA}_tf_plan.out"
  _SERVICE_NAME: ""
  _MAX_RETRIES: 10
  _RETRY_SLEEP_IN_SECS: 10
