steps:
  - name: "bash"
    id: PY_DIST_DIR
    script: |
      #!/usr/bin/env bash
      mkdir -p ${DIST_DIR}
      echo "Created ${DIST_DIR}"
  - name: "python"
    id: PY_PIP_DOWNLOAD
    entrypoint: "python3"
    args: ["-m", "pip", "download", "--no-deps", "--dest", "${_DIST_DIR}", "--extra-index-url",
      "${_AR_PIP_REPO}/simple/", "${_PIP_PKG_ARG}"]
  - name: "gcr.io/cloud-builders/docker"
    id: DOCKER_BUILD
    args: ["build", "--pull", "--no-cache", "--progress", "plain", "--build-arg",
      "BASE_IMAGE=${_BASE_IMAGE}", "--build-arg", "DIST_DIR=${_DIST_DIR}", "--tag",
      "${_IMAGE_NAME}", "--tag", "${_REMOTE_IMAGE_LATEST}", "--tag", "${_REMOTE_IMAGE_SHA}",
      "--file", "${_DOCKERFILE}", "."]
  - name: "gcr.io/cloud-builders/docker"
    id: DOCKER_PUSH_SHA
    args: ["push", "${_REMOTE_IMAGE_SHA}"]
  - name: "gcr.io/cloud-builders/docker"
    id: DOCKER_PUSH_LATEST
    args: ["push", "${_REMOTE_IMAGE_LATEST}"]
  - name: "gcr.io/cloud-builders/gcloud"
    id: WAIT_FOR_RUN_READY
    entrypoint: "sh"
    script: "#!/usr/bin/env sh\nVALID_LATEST_STATUS=\"True\"\nVALID_LATEST_TYPE=\"Ready\"\nSEPARATOR=\"@\"\nVALID_TYPE_STATUS=\"${VALID_LATEST_TYPE}${SEPARATOR}${VALID_LATEST_STATUS}\"\n\nREGION=${REGION:-europe-west3}\nMAX_RETRIES=${MAX_RETRIES:-5}\nRETRY_SLEEP_IN_SECS=${RETRY_SLEEP_IN_SECS:-10}\n\nPATH_LATEST_STATUS=\"status.conditions[0].status\"\nPATH_LATEST_TYPE=\"status.conditions[0].type\"\n\nSERVICE_LOG_STR=\"${SERVICE_NAME}@${REGION}
      in ${PROJECT}\"\n\nfunction latest_status_condition\n{\n  local STATUS_PATH=${1}\n\n
      \ gcloud run services describe ${SERVICE_NAME} \\\n    --region=${REGION} \\\n
      \   --project=${PROJECT} \\\n    --format=\"value(${STATUS_PATH})\"\n}\n\nfunction
      latest_type_status\n{\n  local LATEST_STATUS=$(latest_status_condition ${PATH_LATEST_STATUS})\n
      \ local LATEST_TYPE=$(latest_status_condition ${PATH_LATEST_TYPE})\n\n  echo
      \"${LATEST_TYPE}${SEPARATOR}${LATEST_STATUS}\"\n}\n\nfunction is_ready\n{\n
      \ local LATEST_TYPE_STATUS=$(latest_type_status)\n  \n  local RESULT=1\n  if
      [ \"${LATEST_TYPE_STATUS}\" == \"${VALID_TYPE_STATUS}\" ]\n  then\n    RESULT=0\n
      \ fi\n  return ${RESULT}\n}\n\nfunction wait_for_ready\n{\n  local IS_READY=1\n
      \ local RESULT=1\n\n  local LATEST_TYPE_STATUS=\"\"\n\n  for SEC in $(seq 1
      ${MAX_RETRIES})\n  do\n    is_ready\n    IS_READY=${?}\n    if [ ${IS_READY}
      -eq 0 ]\n    then\n      RESULT=0\n      break\n    fi\n    LATEST_TYPE_STATUS=$(latest_type_status)\n
      \   echo \"Service ${SERVICE_LOG_STR} is **NOT** ready. Got: <${LATEST_TYPE_STATUS}>.
      Expected: <${VALID_TYPE_STATUS}>\"\n    echo \"Retry ${SEC} of ${MAX_RETRIES},
      waiting ${RETRY_SLEEP_IN_SECS} seconds.\"\n    sleep ${RETRY_SLEEP_IN_SECS}\n
      \ done\n  \n  LATEST_TYPE_STATUS=$(latest_type_status)\n  if [ ${RESULT} -eq
      0 ]\n  then\n    echo \"[OK] Service ${SERVICE_LOG_STR} is ready. Got: <${LATEST_TYPE_STATUS}>.
      Expected: <${VALID_TYPE_STATUS}>\"\n  else\n    echo \"[ERROR] Service ${SERVICE_LOG_STR}
      is not ready. Got: <${LATEST_TYPE_STATUS}>. Expected: <${VALID_TYPE_STATUS}>\"\n
      \ fi\n\n  return ${RESULT}\n}\n\necho \"Waiting for service ${SERVICE_LOG_STR}
      to be ready <${VALID_TYPE_STATUS}>\"\necho \"Max retries is ${MAX_RETRY} with
      sleep time of ${RETRY_SLEEP_IN_SECS} seconds in between.\"\n\nwait_for_ready\nexit
      ${?}\n"
  - name: "gcr.io/cloud-builders/gcloud"
    id: IMAGE_DEPLOY
    args: ["run", "deploy", "${_SERVICE_NAME}", "--image", "${_REMOTE_IMAGE_SHA}",
      "--region", "${LOCATION}"]
logsBucket: "gs://${_BUCKET_NAME}/cloudbuild_logs/${TRIGGER_NAME}"
options:
  dynamic_substitutions: true
  env:
    - "DIST_DIR=${_DIST_DIR}"
  logging: LEGACY
  logStreamingOption: STREAM_DEFAULT
  machineType: UNSPECIFIED
  substitution_option: "ALLOW_LOOSE"
substitutions:
  _DIST_DIR: "dist"
  _DOCKERFILE: ""
  _PIP_PKG_ARG: ""
  _BASE_IMAGE: ""
  _IMAGE_NAME: ""
  _AR_DOCKER_REPO: ""
  _AR_PIP_REPO: ""
  _PIP_EXTRA_INDEX_URL: "${_AR_PIP_REPO}/simple/"
  _REMOTE_IMAGE_LATEST: "${_AR_DOCKER_REPO}/${_IMAGE_NAME}:latest"
  _REMOTE_IMAGE_SHA: "${_AR_DOCKER_REPO}/${_IMAGE_NAME}:${SHORT_SHA}"
  _SERVICE_NAME: ""
images:
  - "${_REMOTE_IMAGE_LATEST}"
  - "${_REMOTE_IMAGE_SHA}"
